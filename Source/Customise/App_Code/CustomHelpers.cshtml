@using Core.Common;

@helper HelperName(string name)
{
    // your helper can contain code and/or markup, e.g.
    // var msg = "Hello " + name;
    // <p>@msg</p>
    // For more information, visit http://go.microsoft.com/fwlink/?LinkID=204658
}


@* For displaying Status in the Index View*@
@helper RenderStatus(int id)
{
    if (id == (int)StatusConstants.Submitted)
    {
        @("Submitted");
    }
    else if (id == (int)StatusConstants.Approved)
    {
        @("Approved")
    }
    else if (id == (int)StatusConstants.Drafted)
    {
        @("Drafted")
    }
    else if (id == (int)StatusConstants.Import)
    {
        @("Imported")
    }
    else if (id == (int)StatusConstants.Modified)
    {
        @("Modified")
    }
    else if (id == (int)StatusConstants.Complete)
    {
        @("Completed")
    }
    else if (id == (int)StatusConstants.Closed)
    {
        @("Closed")
    }

}



@*For Rendering CheckBoxes*@
@helper RenderCheckBox(string GatePass, int? GatePassHeaderId, int GatePassStatus)
{
    <input type="checkbox" />
    if (GatePassHeaderId.HasValue)
    {
        <span class='glyphicon glyphicon-log-out @(GatePassStatus == (int)StatusConstants.Submitted ? "text-danger" : "")' title=@GatePass></span>
    }
}

@helper RenderCheckBox()
{
    <input type="checkbox" />
}


@*For Rendering UserImages*@
@helper RenderUserImage(string Name)
{
    string Defaultdomain = (System.Configuration.ConfigurationManager.AppSettings["ProfilePic"]);
    string ImgSrc = Defaultdomain + Name + ".jpg";
    <div>
        <img src="@ImgSrc" class="img-circle UserIndexImage" title="@Name" onerror="$(this).attr('src', '/Images/DefaultUser.png')" />
    </div>
}

@*To Display Totals in Index Page*@
@helper RenderTotal(decimal? Total, int? DecimalPlace)
{
    <span>@decimal.Round(Total ?? 0, DecimalPlace ?? 0)</span>
}


@*To Display Submit and Review action links in Index page*@
@helper RenderActionColumn(string ControllerName, int HeaderId, int Status, bool? Reviewed, int? ReviewCount, string IndexStatus)
{

    if (Status == (int)StatusConstants.Submitted)
    {
        <p class="Badge_Cont">
            <a class="glyphicon glyphicon-thumbs-up" data-toggle="tooltip" href="/@ControllerName/Review?Id=@HeaderId&IndexType=@(IndexStatus)" title="Review"> </a>
            <span class="IndexBadges label @(Reviewed==true ? "label-success" : "label-danger")">@ReviewCount</span>
        </p>
    }
    if (Status == (int)StatusConstants.Drafted || Status == (int)StatusConstants.Modified || Status == (int)StatusConstants.Import)
    {
        <a class="glyphicon glyphicon-floppy-open" title="Submit" data-toggle="tooltip" href="/@ControllerName/Submit?Id=@HeaderId&IndexType=@(IndexStatus)"></a>
    }
}



@*To Display Status Filters*@
@helper RenderStatusFilters(decimal PendingToSubmit, decimal PendingToReview, string ControllerName, int DocTypeId, string IndexStatus)
{
    <h4 id="StatusFilter" style="height:20px">
        <a class="btn btn-primary right @(IndexStatus == "All" ? "focus" : "")" href="/@ControllerName/Index/@DocTypeId" id="All" style="border-color: #fff"> All </a>
        <a class="btn btn-primary right @(IndexStatus == "PTS" ? "focus" : "")" href="/@ControllerName/Index_PendingToSubmit/@DocTypeId" id="PTS" style="border-color: #fff">Pending to Submit <span class='badge'>@(PendingToSubmit != 0 ? PendingToSubmit.ToString() : "")</span> </a>
        <a class="btn btn-primary right @(IndexStatus == "PTR" ? "focus" : "")" href="/@ControllerName/Index_PendingToReview/@DocTypeId" id="PTR" style="border-color: #fff">Pending to Review <span class="badge">@(PendingToReview != 0 ? PendingToReview.ToString() : "")</span></a>
    </h4>
}


@*To Add Hidden Edit ActionLink in Index*@
@helper RenderHEDActionLink(string ControllerName, int DocId, int Status, string IndexStatus)
{
    if (Status == (int)StatusConstants.Drafted || Status == (int)StatusConstants.Import)
    {
        <a href="/@(ControllerName)/Modify/@(DocId)?IndexType=@IndexStatus" hidden class="RecEditurl"></a>
        <a href="/@(ControllerName)/Delete/@(DocId)" hidden class="RecDelurl"></a>
    }
    else if (Status == (int)StatusConstants.Submitted || Status == (int)StatusConstants.Modified)
    {
        <a href="/@(ControllerName)/ModifyAfter_Submit/@(DocId)?IndexType=@IndexStatus" hidden class="RecEditurl"></a>
        <a href="/@(ControllerName)/DeleteAfter_Submit/@(DocId)" hidden class="RecDelurl"></a>
    }
    else
    {
        <a href="/@(ControllerName)/DetailInformation/@(DocId)?IndexType=@IndexStatus" hidden class="RecEditurl"></a>
    }

}  

@helper GenerateDisposableFilters(List<Tuple<string, string, Dictionary<string, string>, bool>> ParaList, string Cname, string ActionName)
{

    Uri u = new Uri(Cname + "/" + ActionName, UriKind.Relative);

    foreach (var item in ParaList)
    {
        <span style="display: inline-block; padding: 3px 0 5px 0;margin-top:2px; background-color: #ffffff" class="pills ilblock">
            <span class="label label-info pills">
                @if (!item.Item4)
                {
                    <a class="glyphicon glyphicon-remove para-filters para-title" data-toggle="tooltip" href="/@(u.ToString() +"?Filter="+item.Item2)" style="color:white;opacity:0.4" title="Parameter Filters"> </a>
                }
                @item.Item1 :
            </span>
            @if (item.Item3.Count() > 0)
            {
                foreach (var iparam in item.Item3)
                {
                    <span class="label label-danger pills">
                        @if (!item.Item4)
                        {
                            <a class="glyphicon glyphicon-remove para-filters" data-toggle="tooltip" href="/@(u.ToString() + "?Filter=" + item.Item2 + "&iFilter=" + iparam.Key)" style="color:white;opacity:0.4" title="Parameter Filters"> </a>
                        }

                        @iparam.Value
                    </span>
                }
            }
        </span>
    }
}