@model Model.ViewModel.JobInvoiceLineViewModel
@using Core.Common

<style type="text/css">
    .ui-autocomplete {
        max-height: 250px;
        overflow-y: auto;
        /* prevent horizontal scrollbar */
        overflow-x: hidden;
    }
</style>

<div class="modal-content">
    <div class="modal-header" style="border-bottom: 1px solid #8E8888">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true"> <span class="glyphicon glyphicon-remove"></span></button>
        <h3>
            <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"><span class="glyphicon glyphicon-file black"></span> @ViewBag.DocNo</span>
        </h3>
    </div>
    <div>
        @using (Html.BeginForm("_CreatePost", "JobInvoiceReceiveLine", FormMethod.Post, new { enctype = "multipart/form-data", id = "modform" }))
        {
            @Html.ValidationLog((string)TempData["CSEXCL"])

            <div class="form-horizontal modal-body">

                @Html.AntiForgeryToken()

                @Html.HiddenFor(model => model.JobReceiveLineId)
                @Html.HiddenFor(m => m.JobInvoiceHeaderId)
                @Html.HiddenFor(m => m.JobReceiveHeaderId)
                @Html.HiddenFor(m => m.JobOrderLineId)
                @Html.HiddenFor(m => m.JobInvoiceLineId)
                @Html.HiddenFor(m => m.JobWorkerId)
                @Html.HiddenFor(m => m.ProductId)
                @Html.HiddenFor(m => m.OrderBalanceQty)
                @Html.HiddenFor(m => m.UnitDecimalPlaces)
                @Html.HiddenFor(m => m.DealUnitDecimalPlaces)
                @Html.HiddenFor(m => m.JobInvoiceSettings.ProcessId)
                @Html.HiddenFor(m => m.JobInvoiceSettings.SqlProcConsumption)
                @Html.HiddenFor(m => m.JobInvoiceSettings.isPostedInStock)
                @Html.HiddenFor(m => m.JobInvoiceSettings.CalculationId)
                @Html.HiddenFor(m => m.JobInvoiceSettings.isPostedInStockProcess)
                @Html.HiddenFor(m => m.DivisionId)
                @Html.HiddenFor(m => m.SiteId)
                @Html.HiddenFor(m => m.DocTypeId)
                @Html.HiddenFor(m => m.ProductUidId)

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row">
                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleProductUID?"":"none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleProductUID)
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductUidId, "ProductUId", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.ProductUidName, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.ProductUidId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ProductId, "Product", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBox(" ", "", new { @class = "form-control", @id = "acProducts" })
                                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobOrderLineId, "Job Order", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBox(" ", "", new { @class = "form-control", @id = "acorder", @readonly = "true" })
                                @Html.ValidationMessageFor(model => model.JobOrderLineId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension1 ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension1)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension1Id, "Dimension1", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension1Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension1Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleDimension2 ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleDimension2)
                        <div class="form-group">
                            @Html.LabelFor(model => model.Dimension2Id, "Dimension2", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Dimension2Name, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Dimension2Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Specification, "Specification", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Specification, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CostCenterId, "CostCenter", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.CostCenterId, new { @class = "form-control col-xs-7 required", @readonly = true })
                                @Html.ValidationMessageFor(model => model.CostCenterId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleLotNo ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleLotNo)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LotNo, "Lot No", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.LotNo, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.LotNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.JobQty, "Job Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-4" style="padding-right:0px;">
                                @Html.TextBoxFor(model => model.JobQty, new { @class = "form-control required cusrightnormal JobQuantity" })
                                @Html.ValidationMessageFor(model => model.JobQty, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-3" style="padding-left:0px">
                                @Html.TextBoxFor(m => m.UnitId, new { @class = "form-control col-xs-2 cusleftnormal", @readonly = "true" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Rate, "Rate", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Rate, new { @class = "form-control col-xs-7 required text-right" })
                                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleLoss ? "" : "none")">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ReceiveQty, "Receive Qty", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.ReceiveQty, new { @class = "form-control col-xs-7 required Quantity" })
                                @Html.ValidationMessageFor(model => model.ReceiveQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6" style="display:@(Model.JobInvoiceSettings.isVisibleLoss ? "" : "none")">
                        @Html.HiddenFor(m => m.JobInvoiceSettings.isVisibleLoss)
                        <div class="form-group">
                            @Html.LabelFor(model => model.LossQty, "Loss Qty", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.LossQty, new { @class = "form-control col-xs-7 required Quantity" })
                                @Html.ValidationMessageFor(model => model.LossQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>



                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PassQty, "Pass Qty", new { @class = "control-label col-xs-4 " })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.PassQty, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.PassQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealUnitId, "Deal Unit& Multiplier", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-4" style="padding-right:0px">
                                @Html.DropDownListFor(model => model.DealUnitId, new SelectList(ViewBag.DeliveryUnitList as System.Collections.IEnumerable, "UnitId", "UnitName"), new { @class = "form-control height cusrightnormal required" })
                                @Html.ValidationMessageFor(model => model.DealUnitId, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-3" style="padding-left:0px">
                                @Html.TextBoxFor(model => model.UnitConversionMultiplier, new { @class = "form-control cusleftnormal required" })
                                @Html.ValidationMessageFor(model => model.UnitConversionMultiplier, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DealQty, "Deal Qty", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.DealQty, new { @class = "form-control col-xs-7 required" })
                                @Html.ValidationMessageFor(model => model.DealQty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Amount, "Amount", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control col-xs-7 required text-right" })
                                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.PenaltyRate, "Penality", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-2" style="padding-right:0px">
                                @Html.TextBoxFor(model => model.PenaltyRate, new { @class = "form-control cusrightnormal required" })
                                @Html.ValidationMessageFor(model => model.PenaltyRate, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-5" style="padding-left:0px">
                                @Html.TextBoxFor(model => model.PenaltyAmt, new { @class = "form-control cusleftnormal required" })
                                @Html.ValidationMessageFor(model => model.PenaltyAmt, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.IncentiveRate, "Incentive", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-2" style="padding-right:0px">
                                @Html.TextBoxFor(model => model.IncentiveRate, new { @class = "form-control cusrightnormal required" })
                                @Html.ValidationMessageFor(model => model.IncentiveRate, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-xs-5" style="padding-left:0px">
                                @Html.TextBoxFor(model => model.IncentiveAmt, new { @class = "form-control cusleftnormal required" })
                                @Html.ValidationMessageFor(model => model.IncentiveAmt, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>


                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Weight, "Weight", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextBoxFor(model => model.Weight, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-xs-4" })
                            <div class="col-xs-7">
                                @Html.TextAreaFor(model => model.Remark, new { @class = "form-control required" })
                                @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer " style="padding: 19px 20px 0 20px; border-top:1px solid #8E8888">
                    @if (ViewBag.LineMode == "Edit" || ViewBag.LineMode == "Create")
                    {
                        <button class="btn custom left" name="Command:Edit" type="submit" id="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-floppy-disk black"></span> </h2></button>}
                    @if (ViewBag.LineMode == "Delete")
                    {
                        <button class="btn custom" name="Command:Delete" id="delete" type="submit"><h2 style="margin:0px"><span class="glyphicon glyphicon-trash black"></span> </h2></button>}
                </div>
            </div>
        }
    </div>
</div>


@if (Model.JobInvoiceLineId <= 0)
{
    <script type="text/javascript">
        $(function(){

            $.ajax({
                cache: false,
                url: "/TaxCalculation/GetMaxLineId/",
                data: { HeaderId: parseInt($('#JobInvoiceHeaderId').val()), LineTable:"Web.JobInvoiceLines" , LineKeyField: "JobInvoiceLineId" ,HeaderKeyField:"JobInvoiceHeaderId"},
                success: function (data) {
                    AddCalculation(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrive calculation footer' + thrownError);
                },
            });


            function AddCalculation(MaxLineId)
            {
                AddCalculationFields(parseInt($('#JobInvoiceHeaderId').val()),false,@Model.JobInvoiceSettings.CalculationId,"Web.JobInvoiceHeaderCharges","Web.JobInvoiceLineCharges",MaxLineId,$('#DocTypeId','.modal-body').val(),$('#SiteId','.modal-body').val(),$('#DivisionId','.modal-body').val());
            }

        })
    </script>
}
else
{
    <script type="text/javascript">
        $(function(){
            AddCalculationFieldsEdit(parseInt($('#JobInvoiceHeaderId').val()),$('#JobInvoiceLineId').val(),false,"Web.JobInvoiceHeaderCharges","Web.JobInvoiceLineCharges");
        })
    </script>
}



<script type="text/javascript">


    $(document).ready(function () {
        CustomSelectFunction($("#CostCenterId"), '/ComboHelpList/GetCostCenter', '/ComboHelpList/SetSingleCostCenter', ' ', false, 1);

        var IsSaved=false;
        var ValidationCount=0;

        $('#modform').bind('submit',function(event){

            if(!IsSaved)
            {
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                $('button:submit').attr('disabled','disabled');
                return IsSaved;
            }
            else
            {
                return false;
            }


        });

        function ValidateData() {
            var ValidationMessage = "";

            //Client Side Validaion.....

            return  (ValidationMessage=="");

        }

        var id=@Model.JobReceiveLineId;
        if(id>0)
        {
            var order = '@Model.JobOrderDocNo';
            $('#autocompleteorder').val(order).attr('disabled', 'disabled');
            $('#ProductId').attr('readonly', 'true');
            $('#ProductUidName').attr('readonly', 'true');

            if($('#ProductUidId').val())
            {
                $('#JobQty').attr("readonly","true");
                $('#ReceiveQty').attr("readonly","true");
            }

        }
        $('#delete','.modal-content').click(function (e) {
            if(id>0)
            {
                var url = '/JobInvoiceReceiveLine/DeletePost';
                $('form#modform').attr('action',url);
                DeletingProductCharges();
                return
            }
            else
            {
                return false;
            }
        })


        $('#IncentiveAmt,#IncentiveRate').change(function(){

            $("#CALL_INCENTRATE").val($('#IncentiveRate').val()).trigger("change");

            if($('#IncentiveRate').val()&&$('#IncentiveRate').val()>0)
                $('#IncentiveAmt').val(($('#DealQty').val() * $('#IncentiveRate').val()).toFixed(2))
            else
                $("#CALL_INCENT").val($('#IncentiveAmt').val()).trigger("change");
        })

        $('#PenaltyAmt,#PenaltyRate').change(function(){

            $("#CALL_PENALTYRATE").val($('#PenaltyRate').val()).trigger("change");

            if($('#PenaltyRate').val() && $('#PenaltyRate').val() > 0)
                $('#PenaltyAmt').val(($('#DealQty').val() * $('#PenaltyRate').val()).toFixed(2))
            else
                $("#CALL_PENALTY").val($('#PenaltyAmt').val()).trigger("change");

        })


        //$('#IncentiveRate').change(function(){
        //    $('#IncentiveAmt').val(($('#DealQty').val() * $(this).val()).toFixed(2))
        //    $("#CALL_INCENTRATE").val($(this).val()).trigger("change");
        //})

        //$('#PenaltyRate').change(function(){
        //    $('#PenaltyAmt').val(($('#DealQty').val() * $(this).val()).toFixed(2))
        //    $("#CALL_PENALTYRATE").val($(this).val()).trigger("change");
        //})


    });

</script>
@if (Model.JobInvoiceLineId <= 0)
{
    <script type="text/javascript">

        $( "#acProducts" ).focusout( function( ) {

            if (!$(this).val()) {
                $("#acProducts").val("");
                $('#ProductId').val("");
                $('#JobOrderLineId').val("");
            }


            if($("#acProducts").val()=="")
            {
                $('#ProductId').val("");
                $('#JobOrderLineId').val("");
            }

            if($('#JobOrderLineId').val()!="" && $('#JobOrderLineId').val()!=0)
            {
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetOrderDetail"))",
                    data: { OrderId: $("#JobOrderLineId").val(),InvoiceId: $("#JobInvoiceHeaderId",'.modal-body').val()},
                    success: function (data) {
                        $('#acorder').val(data.JobOrderHeaderDocNo);
                        $('#UnitDecimalPlaces').val(data.UnitDecimalPlaces);
                        $('#DealUnitDecimalPlaces').val(data.DealUnitDecimalPlaces);

                        if($('#ProductUidName').val())
                        {
                            $('#JobQty').val(1).attr("readonly","true");
                            $('#ReceiveQty').val(1).attr("readonly","true");
                        }
                        else
                        {
                            $('#JobQty').val(data.Qty.toFixed(data.UnitDecimalPlaces));
                            $('#ReceiveQty').val(data.Qty.toFixed(data.UnitDecimalPlaces));
                        }

                        $('#Specification').val(data.Specification);
                        $('#LotNo').val(data.LotNo);
                        $("#UnitId").val(data.UnitId);
                        $("#DealUnitId").val(data.DealUnitId);
                        $('#UnitConversionMultiplier').val(data.UnitConversionMultiplier);
                        $('#Rate').val(data.Rate);
                        $('#Amount').val(data.Amount);
                        $('#DealQty').val(data.DealQty.toFixed(data.DealUnitDecimalPlaces));
                        $('#OrderBalanceQty').val(data.Qty);
                        $("#ProductId").select2('data', { id: data.ProductId, text: data.ProductName});
                        $('#JobQty').trigger('focusout');
                        $('#ReceiveQty').trigger('keyup');
                        (data.CostCenterId==null)?(1==1):($("#CostCenterId").select2("data", {id: data.CostCenterId, text: data.CostCenterName}));
                        (data.Dimension1Name==null)?(1==1):($("#Dimension1Name").val(data.Dimension1Name));

                        if(data.Dimension2Name!=null)
                        {
                            $("#Dimension2Name").val(data.Dimension2Name)
                        }

                        CopyOrderCharges(data.RHeaderCharges,data.RLineCharges);

                        //LockFields();
                        ChargeCalculation();

                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve product details.' + thrownError);
                    }
                });
            }
            else if($('#JobOrderLineId').val()=="")
            {
                $('#acorder').val("");
                $('#JobQty').val(0).trigger('keyup');
                $("#ProductId").select2('val', "");
                $('#LotNo').val('');
                $('#UnitConversionMultiplier').val(0);
                $('#Qty').val(0);
                $('#Specification').val("");
                $('#DealQty').val(0);
                $('#UnitDecimalPlaces').val(0);
                $('#DealUnitDecimalPlaces').val(0);
                $("#Dimension1Name").val("");
                $("#Dimension2Name").val("");
                //UnLockFields();
            }
        }
        );


        function CopyOrderCharges(HeaderCharges,LineCharges)
        {
            $.each(HeaderCharges,function(index,value){

                var $ModalBody=$('div.modal-body');
                var selector="#CALH_"+value.ChargeCode+"RATE";
                if($ModalBody.find(selector).length)
                {
                    $ModalBody.find(selector).val(value.Rate);
                }

            })

            $.each(LineCharges,function(index,value){

                var $ModalBody=$('div.modal-body');
                var selector="#CALL_"+value.ChargeCode+"RATE";

                if($ModalBody.find(selector).length)
                {
                    if(selector=="#CALL_INCENTRATE")
                        $('#IncentiveRate').val(value.Rate).trigger("change");
                    else if(selector=="#CALL_PENALTYRATE")
                        $('#PenaltyRate').val(value.Rate).trigger("change");
                    else
                        $ModalBody.find(selector).val(value.Rate);
                }

            })
        }


        $(function() {
            $("#acProducts").autocomplete({
                delay: 500,
                minLength: 3,
                source: function(request,response){

                    //var matcher = new RegExp( $.ui.autocomplete.escapeRegex( request.term ), "i" );

                    //if (  request.term in cachearray ) {
                    //    response( cache[ term ] );
                    //    return;
                    //}

                    //else
                    //    {

                    var DocID = $('#JobInvoiceHeaderId', '.modal-body').val();
                    $.ajax({
                        cache: false,
                        type: "POST",
                        url: "@(Url.Action("GetCustomProducts"))",
                        data: { id:DocID, JobWorkerId:$("#JobWorkerId", '.modal-body').val(), term:request.term,Limit:30 },
                        success: function (data) {
                            if(data.length>0){
                                var cachearray = data.error ? [] : $.map(data, function(m) {

                                    return {
                                        value: m.ProductName,
                                        key: m.ProductId,
                                        spec:m.Specification,
                                        dim1: m.Dimension1Name,
                                        dim2:m.Dimension2Name,
                                        JO:m.JobOrderNo,
                                        balqty:m.Qty,
                                        linekey:m.JobOrderLineId,
                                    };
                                });
                                response(cachearray);
                            }
                            else
                            {
                                var dimensions = { width: 10};
                                var cachearray=$.map(dimensions,function(value,key){
                                    return{
                                        value:"No Record Found!",
                                        key:null
                                    }
                                })
                                response(cachearray);
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            $('.ui-autocomplete-loading').removeClass("ui-autocomplete-loading");
                            alert('Failed to retrieve Pending Orders.' + thrownError);
                        }

                    });

                },
                appendTo : $("#myModalContent"),
                select: function(event, ui) {
                    // prevent autocomplete from updating the textbox
                    // navigate to the selected item's url
                    if($("#acProducts").val()=="")
                    {
                        $('#ProductId').val("");
                        $('#JobOrderLineId').val("");
                    }
                    else{
                        $("#ProductId").val(ui.item.key);
                        $("#JobOrderLineId").val(ui.item.linekey);
                    }
                },

            }).data("ui-autocomplete")._renderItem = function(ul, item) {
                var $a = $("<a></a>");
                $("<strong></strong>").text(item.value).appendTo($a);
                (item.balqty==null)?(""):($("<small></small>").text(" (Qty:"+item.balqty+")").appendTo($a));
                (item.spec==null)?(""):($("<br /><span class='small' style='font-weight:bold'></span>").text(item.spec).appendTo($a));
                (item.dim1==null)?(""):($("<br /><span class='small'></span>").text(item.dim1+",").appendTo($a));
                (item.dim2==null)?(""):($("<span class='small'></span>").text(item.dim2).appendTo($a));
                (item.JO==null)?(""):($("<br /><span class='small'></span>").text("Order:"+item.JO+",").appendTo($a));



                return $("<li></li>").append($a).appendTo(ul);
            }
        });

        //$("#acProducts").on("focus",function(){
        //    $(this).keydown();
        //})


        $('#ProductUidName').on('change',function(e){



            var data=InitializePopoverForWashingReceive(this,$("#ProductUidName").val(),'@Model.JobInvoiceSettings.isPostedInStock',$('#JobReceiveHeaderId').val(),TransactionTypeConstantsEnum.Receive,'@Model.JobInvoiceSettings.ProcessId');


            if(!data.status)
            {
                $(this).popover('show');
                setTimeout(function() {$('#ProductUidName').popover('destroy');if(!$('#ProductId').val()){ $('#ProductUidName').val('') }else{$('#ProductId').trigger('change');  }},10000);
                $('#JobOrderLineId').val(0);
                $('#acorder').val("").trigger('focusout').removeAttr('disabled');
            }
            else if( data.data.Branch ){
                if( !data.data.LastTransactionDocLineId || !data.data.LastTransactionDocNo){
                    if (!$('#modform').find('.modal-body #errormsg').length) {
                        $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Issue details not found</span></div>")
                    }
                }
                $('#ProductId').val(data.data.ProductId);
                $('#JobOrderLineId').val(data.data.LastTransactionDocLineId);
                $('#acorder').val(data.data.LastTransactionDocNo)
                $("#acProducts").val(data.data.ProductName).trigger('focusout').attr('disabled', 'disabled');

            }
            else
            {
                if( !data.data.GenLineId || !data.data.GenDocNo){
                    if (!$('#modform').find('.modal-body #errormsg').length) {
                        $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >Issue details not found</span></div>")
                    }
                }
                $('#ProductId').val(data.data.ProductId);
                $('#JobOrderLineId').val(data.data.GenLineId);
                $('#acorder').val(data.data.GenDocNo);
                $("#acProducts").val(data.data.ProductName).trigger('focusout').attr('disabled', 'disabled');
            }



        })



    </script>
}

<script type="text/javascript">
    var decimalplaces=0;
    var dealunitdecimalplaces=0;
    $(function () {
        //$("#DealQty,#PassQty").keyup(Calculation);
        $("#DealUnitId").change(GetUnitConversionMultiplier);
        //$("#ProductId").change(GetProductDetail);

        var id=@Model.JobInvoiceLineId;
        if(id>0)
        {
            var tex='@Model.JobOrderDocNo';
            var Prod='@Model.ProductName';
            $("#acorder").val(tex);
            $("#acProducts").val(Prod).attr('readonly','true');
        }

        function GetUnitConversionMultiplier() {
            if ($("#UnitId").val() == $("#DealUnitId").val()) {
                $("#UnitConversionMultiplier").val(1);
                Calculation.call();
            }

            else {

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetUnitConversionDetailJson"))",
                    data: { ProductId: $("#ProductId").val(), UnitId: $("#UnitId").val(), DeliveryUnitId: $("#DealUnitId").val() },

                    success: function (data) {
                        $("#UnitConversionMultiplier").val(data[0].Value);
                        Calculation.call();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve Unit conversion details.' + thrownError);
                    }
                });
            }
        }

    });


    $('#JobQty').focusout(function(){
        $(this).val((parseFloat($(this).val())).toFixed($('#UnitDecimalPlaces').val()));
        $('#PassQty').val($(this).val());
        $('#ReceiveQty').val($(this).val());
        Calculation();
        ValidateData();
        return;
    });


    $('#DealQty,#PassQty,#Rate,#JobQty,#ReceiveQty,#LossQty,#UnitConversionMultiplier').keyup(function(){
        Calculation();
    });

    $('#DealQty,#PassQty,#ReceiveQty,#LossQty').focusout(function(){
        ValidateData();
    });

    function Calculation()
    {
        $('#LossQty').val((parseFloat($('#JobQty').val()-$('#ReceiveQty').val())).toFixed($('#UnitDecimalPlaces').val()))

        if ($("#UnitId").val() == $("#DealUnitId").val()) {
            $("#UnitConversionMultiplier").val(1);
        }

        if ($('#UnitConversionMultiplier').val() != 0) {
            $('#DealQty').val(parseFloat($('#PassQty').val() * $('#UnitConversionMultiplier').val()).toFixed($('#DealUnitDecimalPlaces').val()));
        }

        $('#Amount').val(($('#DealQty').val() * $('#Rate').val()).toFixed(2));

        ChargeCalculation();

    }

    function ValidateData()
    {

        var ValidationMessage = "";

        //Check that Pass Qty can not exceed Job Qty.
        if (parseFloat($('#JobQty').val() - $('#PassQty').val()) < 0) {

            ValidationMessage="PassQty exceeding JobQty";

        }


        //Check that Receive Qty can not exceed Job Qty.
        if (parseFloat($('#JobQty').val() - $('#ReceiveQty').val()) < 0) {

            ValidationMessage="ReceiveQty exceeding JobQty";

        }



        //Check that Job Qty can not exceed Order Balance Qty.
        if (($('#OrderBalanceQty').val() - $('#JobQty').val()) < 0) {

            ValidationMessage="JobQty exceeding Order Balance Qty";

        }

        if(!ValidationMessage=="")
        {
            $('#submit', '.modal-body').attr('disabled', 'disabled');
            if (!$('#modform').find('.modal-body #errormsg').length) {
                $('#modform').find('.modal-body').prepend("<div class='alert alert-danger'><span id=errormsg >"+ValidationMessage+"</span></div>")
            }
            else
                $('#modform').find('.modal-body #errormsg').text(ValidationMessage);
        }
        else
        {
            $('#submit', '.modal-body').removeAttr('disabled');
            $('#modform').find('#errormsg').parent().remove();
        }

        return(ValidationMessage=="");


    }

    var IsSaved=false;
    var ValidationCount=0;

    $('#modform').bind('submit',function(event){

        if(!IsSaved)
        {
            Calculation();
            if(!ValidateData())
            {
                return false;
            }
            IsSaved=true;
            $('button:submit').attr('disabled','disabled');
            return IsSaved;
        }
        else
        {
            return false;
        }

    });




</script>
